// Generated by CoffeeScript 1.6.3
var Slider,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Slider = (function(_super) {
  __extends(Slider, _super);

  function Slider(min, max, step, value) {
    var labelPaddingX, labelPaddingY;
    this.min = min;
    this.max = max;
    this.step = step;
    this.value = value;
    Slider.__super__.constructor.call(this, Resources.get("slider"));
    this.titleWidth = 128;
    labelPaddingY = 4;
    labelPaddingX = 12;
    this.knob = new ImageSprite(Resources.get("sliderKnob"));
    this.knob.touchEnabled = false;
    this.label = new TextLabel("");
    this.title = new TextLabel("");
    this.knob.moveTo(0, this.knob.width / 2);
    this.title.moveTo(-this.titleWidth, labelPaddingY);
    this.label.moveTo(this.getWidth() + labelPaddingX, labelPaddingY);
    this.title.width = this.titleWidth;
    this.scroll(this.value);
    this.addChild(this.sprite);
    this.addChild(this.knob);
    this.addChild(this.label);
    this.addChild(this.title);
  }

  Slider.prototype.ontouchstart = function(e) {
    var value, x;
    x = e.x - this.getAbsolutePosition().x;
    value = this.positionToValue(x);
    return this.scroll(value);
  };

  Slider.prototype.ontouchmove = function(e) {
    var value, x;
    x = e.x - this.getAbsolutePosition().x;
    if (x < 0) {
      x = 0;
    }
    if (x > this.getWidth()) {
      x = this.getWidth();
    }
    value = this.positionToValue(x);
    return this.scroll(value);
  };

  Slider.prototype.onValueChanged = function() {
    return this.setText(this.value);
  };

  Slider.prototype.setTitle = function(title) {
    return this.title.text = title;
  };

  Slider.prototype.setValue = function(value) {
    this.value = value;
    return this.onValueChanged();
  };

  Slider.prototype.setText = function(text) {
    return this.label.text = text;
  };

  Slider.prototype.scroll = function(value) {
    var x;
    this.value = this.adjustValue(value);
    x = this.valueToPosition(this.value);
    this.knob.moveTo(x - this.knob.width / 2, this.knob.height / 2);
    return this.onValueChanged();
  };

  Slider.prototype.adjustValue = function(value) {
    var dist, i, nearestDist, nearestValue, _i, _ref, _ref1, _ref2;
    nearestValue = this.min;
    nearestDist = 0xffffffff;
    for (i = _i = _ref = this.min, _ref1 = this.max, _ref2 = this.step; _ref2 > 0 ? _i <= _ref1 : _i >= _ref1; i = _i += _ref2) {
      dist = Math.abs(value - i);
      if (dist < nearestDist) {
        nearestDist = dist;
        nearestValue = i;
      }
    }
    return nearestValue;
  };

  Slider.prototype.valueToPosition = function(value) {
    var range, val, x;
    range = this.max - this.min;
    val = value - this.min;
    return x = this.getWidth() * (val / range);
  };

  Slider.prototype.positionToValue = function(x) {
    var normValue;
    normValue = x / this.getWidth();
    return this.min + normValue * (this.max - this.min);
  };

  return Slider;

})(SpriteGroup);
